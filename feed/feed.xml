<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>长安路</title>
	<subtitle>Subtitle. Update me.</subtitle>
	
	<link href="https://skadai.github.io/feed/feed.xml" rel="self"/>
	<link href="https://skadai.github.io"/>
	<updated>2021-08-17T00:00:00-00:00</updated>
	<id>https://skadai.github.io</id>
	<author>
		<name>sk</name>
		<email></email>
	</author>
	
	<entry>
		<title>starter</title>
		<link href="https://skadai.github.io/posts/Starter/"/>
		<updated>2021-07-30T00:00:00-00:00</updated>
		<id>https://skadai.github.io/posts/Starter/</id>
		<content type="html">
		  &lt;p&gt;定风波&lt;/p&gt;
&lt;p&gt;苏轼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三月七日，沙湖道中遇雨。雨具先去，同行皆狼狈，余独不觉，已而遂晴，故作此词。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;莫听穿林打叶声，何妨吟啸且徐行。&lt;/p&gt;
&lt;p&gt;竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&lt;/p&gt;
&lt;p&gt;料峭春风吹酒醒，微冷，山头斜照却相迎。&lt;/p&gt;
&lt;p&gt;回首向来萧瑟处，归去，也无风雨也无晴&lt;/p&gt;

			
		</content>
	</entry>
	
	<entry>
		<title>如何部署11ty到github page</title>
		<link href="https://skadai.github.io/posts/deploy_11ty_in_github-page/"/>
		<updated>2021-07-31T00:00:00-00:00</updated>
		<id>https://skadai.github.io/posts/deploy_11ty_in_github-page/</id>
		<content type="html">
		  &lt;h4 id=&quot;%E6%B5%81%E7%A8%8B&quot;&gt;流程 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载11ty 模板 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;https://github.com/google/eleventy-high-performance-blog&lt;/a&gt;, 按照提示构建自己的本地博客&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增 .nojekyll 文件, 此文件用来告知 github-page 不使用 jekyll 以免产生冲突&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增你自己的git仓库, 命名为 &amp;lt;username&amp;gt;.github.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用下面的命令生成一对秘钥&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;    ssh-keygen -t rsa -b &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; -C &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config user.email&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; -f gh-pages -N &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;公钥添加到刚刚的仓库 deploy key&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/58b01ba0e0ca16a8610e92c1d0d2b661-20210730142442-19f6c1.png&quot; alt=&quot;添加公钥&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私钥添加到刚刚的仓库 secret&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/a99999f7a1731866c320691fcb87e148-20210730142605-2772eb.png&quot; alt=&quot;添加私钥&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;在本地项目新增 .github/workflow/build.yml 文件, 添加下面的内容, 主要逻辑是打包静态文件, 并调用预定义的github action 把&lt;br&gt;
编译好的文件提交到git仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Eleventy Build&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; master&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Node&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;14.x&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm ci&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; peaceiris/actions&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v3&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token key atrule&quot;&gt;deploy_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;            &lt;span class=&quot;token key atrule&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./_site&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面文件中 secrets.ACTIONS_DEPLOY_KEY 正好对应了步骤4中配置好的私钥, 这样action中可以向仓库gh-page分支提交编译好的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;最后一步, 把github-page的source 设置为gh-page, 这样每次往master分支提交内容之后, 就可以触发 action 自动编译文件push到gh-page分支, 你可以在自己的 &amp;lt;username&amp;gt;.github.io 看到最新的博客了&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot;&gt;参考资料 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/&quot;&gt;https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/&quot;&gt;https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11ty基本用法
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1zw41197NL?from=search&amp;amp;seid=4624100872590089830&quot;&gt;https://www.bilibili.com/video/BV1zw41197NL?from=search&amp;amp;seid=4624100872590089830&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/&quot;&gt;https://www.11ty.dev/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

			
		</content>
	</entry>
	
	<entry>
		<title>试用 RSSHub</title>
		<link href="https://skadai.github.io/posts/rsshub/"/>
		<updated>2021-08-07T00:00:00-00:00</updated>
		<id>https://skadai.github.io/posts/rsshub/</id>
		<content type="html">
		  &lt;h4 id=&quot;rss-%E6%98%AF%E4%BB%80%E4%B9%88&quot;&gt;RSS 是什么 &lt;a class=&quot;direct-link&quot; href=&quot;#rss-%E6%98%AF%E4%BB%80%E4%B9%88&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RSS&quot;&gt;RSS&lt;/a&gt; 的全称是 RDF Site Summary 或者 Really Simple Syndication, &lt;s&gt;别问我英文啥意思我不认识&lt;/s&gt;&lt;br&gt;
就是让不同的网站的数据都可以用统一的格式进行定义和传输，这样我们可挑选自己感兴趣的网站进行订阅，获取到新的文章集中阅读了，这可以让我们集中阅读感兴趣的文章乃至观看视频，不用在网站上面晃来晃去浪费时间啦&lt;/p&gt;
&lt;h4 id=&quot;rss-%E9%98%85%E8%AF%BB%E5%99%A8&quot;&gt;RSS 阅读器 &lt;a class=&quot;direct-link&quot; href=&quot;#rss-%E9%98%85%E8%AF%BB%E5%99%A8&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;不少网站都提供了下面这个按钮，其实代表的就是rss的意思，点击按钮可以得到一个url，这个url提供的就是和正式网站一直但是样式有别的订阅内容了，通常会是xml格式的文本，所以是没办法方便直接看的。&lt;br&gt;
&lt;img src=&quot;http://cdn.glofission.xyz/img/1b1fe7c45939aff7450787a980c29691-20210807171958-32a5c6.png&quot; alt=&quot;rss icon&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时呢，我们需要有一个阅读器可以解析这么内容并渲染成良好的格式，比如 mac 用户可以选择 &lt;a href=&quot;https://reederapp.com/&quot;&gt;reeder&lt;/a&gt;。&lt;br&gt;
使用的方式也是很简单的，直接在reeder中创建一个本地rss账户, 然后添加订阅源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/5587b52eff73570439b162d574847050-20210807173555-f52921.png&quot; alt=&quot;reeder操作&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后就可以看到，添加源的文章已经一个个排好等待阅读了，reeder 阅读器已经帮忙渲染好了，可以看到排版还是不错的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/5f62ce7eb780ed571010188fe8765b2d-20210807173835-088b0a.png&quot; alt=&quot;reeder article&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;rsshub&quot;&gt;RSSHub &lt;a class=&quot;direct-link&quot; href=&quot;#rsshub&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;实际上，很多网站是没有上面那个魔法图标的，比如b站，我们每次就只能进入网站，点击关注的up动态，看有没有投稿，然后再点进去观看了么？&lt;/p&gt;
&lt;p&gt;当然是有更好的办法的，&lt;a href=&quot;https://github.com/DIYgod/RSSHub&quot;&gt;RSSHub&lt;/a&gt; 就是来干这个的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译一下，就是会写代码的人已经帮把一些常用的网站做好了提取rss的方法，只需要有个机器能根据这些方法把网站数据整成标准 RSS 的格式并提供 url 链接，然后我们就像上面那样用就好了。下面的图片展示了 RSSHub 支持了哪些网站，还是相当丰富的&lt;/p&gt;
&lt;p&gt;RSSHub 自己是提供了试用 &lt;a href=&quot;https://rsshub.app/&quot;&gt;demo&lt;/a&gt; 的，只需要简单的按照不同网站指定的url格式自己拼接，然后直接粘贴到阅读器里面就完事了！&lt;/p&gt;
&lt;div style=&quot;display:flex;justify-content:space-between&quot;&gt;
&lt;img src=&quot;http://cdn.glofission.xyz/img/9d3beee4c6f6ef1f1228b0b706e80863-20210807175616-dc81cd.png&quot;&gt;
&lt;img src=&quot;http://cdn.glofission.xyz/img/179e3b153d7d76dc0497e6f7d4944a2a-20210807175551-b96172.png&quot;&gt;
&lt;/div&gt;
&lt;h4 id=&quot;rsshub-%E9%83%A8%E7%BD%B2&quot;&gt;RSSHub 部署 &lt;a class=&quot;direct-link&quot; href=&quot;#rsshub-%E9%83%A8%E7%BD%B2&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;官方试用的demo毕竟太多人用，很容易遭到网站的反爬限制，这个时候你可以选择自己部署一个 RSSHub 的服务, RSSHub 的官方文档里面也有 &lt;a href=&quot;https://docs.rsshub.app/install/&quot;&gt;操作说明&lt;/a&gt;, 亲测可用&lt;/p&gt;
&lt;p&gt;下面简单描述下流程，首先得有一个自己的服务器，我用的是 aliyun ECS(单核 内存2GiB, 硬盘40GB)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ssh 登录到服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉取 RSSHub 的 Docker 镜像, 不加 tag 的话会直接下载最新的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;docker pull diygod/rsshub&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有用过 docker 的话需要自己先安装一下， 可以参考 &lt;a href=&quot;https://www.runoob.com/docker/ubuntu-docker-install.html&quot;&gt;Ubuntu Docker安装&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;启动镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;docker run -d --name rsshub -p &lt;span class=&quot;token number&quot;&gt;1200&lt;/span&gt;:1200 diygod/rsshub&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;稍微解释一下上面这个命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; 就是把镜像启动一个容器跑起来，&lt;code&gt;--name&lt;/code&gt; 给容器命名， &lt;code&gt;-d&lt;/code&gt; 指定后台运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 1200:1200&lt;/code&gt; 并让服务器上面的1200端口和容器内部的1200建立映射，这样在服务器上面访问 localhost:1200 就可以访问到容器里面的服务了，容器内部的端口1200是写死的，但是服务器上面的端口是可以修改的，比如改成8000（如果没有冲突的话）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;服务器安全组加上1200端口, 操作如下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好吧，其实上面 RSSHub 文档里面都有....&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/a070687ca2ed0a117eac459bd2edfbfc-20210807181508-b0ee44.png&quot; alt=&quot;add rule&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/skadai/bluebird/raw/master/5a4ca0d6c33d77ffef06e1cbe305daef-20210808092442-13a705.png&quot; alt=&quot;add rule2&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;把安全组应用到ECS上面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/c7c495b56bb08bcbbe1b7bc593012e6e-20210807182042-0a7e9a.png&quot; alt=&quot;apply rule&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面图片打码的就是服务器的公网 IP了，经过上面一通操作我们在浏览器输入 http://&amp;lt;公网IP&amp;gt;:1200, 看到和上面 RSSHub demo 一样的页面就算部署成功了，之后我们就可以用专属的RSS 提取服务来生成订阅源了🙂&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.glofission.xyz/img/20dd670b20cc76c57676829ac7ba0657-20210807182335-38e268.png&quot; alt=&quot;final page&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有个 RSSHub + Reeder 这个组合，就可以很方便添加自己感兴趣的内容了，不用在漫无目的的看了，大大的节省时间（&lt;s&gt;maybe是看了更多有的没的&lt;/s&gt;）&lt;/p&gt;

			
		</content>
	</entry>
	
	<entry>
		<title>利用 flask_caching 添加缓存</title>
		<link href="https://skadai.github.io/posts/flask_caching/"/>
		<updated>2021-08-15T00:00:00-00:00</updated>
		<id>https://skadai.github.io/posts/flask_caching/</id>
		<content type="html">
		  &lt;h4 id=&quot;%E8%83%8C%E6%99%AF&quot;&gt;背景 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%83%8C%E6%99%AF&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;工作中接到反馈，我负责的服务在跑数过程中经常会遇到一些业务逻辑的变化而重刷数据，相同的数据要反复的请求服务，而服务中用到了深度学习模型，比较耗时，因此希望添加缓存&lt;/p&gt;
&lt;h4 id=&quot;%E9%9C%80%E6%B1%82&quot;&gt;需求 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9C%80%E6%B1%82&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;为服务添加缓存，收到服务之后，优先查询缓存，缓存没有才去调用服务&lt;/li&gt;
&lt;li&gt;如果请求返回的是exception error， 不需要缓存（有可能是model 服务不稳定造成的）&lt;/li&gt;
&lt;li&gt;如果请求中明确说明不用缓存，需要跳过&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88&quot;&gt;技术方案 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Flask_Caching 库基本可以满足要求 （选择第三方库尽量选择一直有维护的，比如还有一个库 flask_cache已经超过一年没有 commit 了，尽量不要选）&lt;/p&gt;
&lt;h4 id=&quot;%E5%85%B7%E4%BD%93%E5%AE%9E%E6%96%BD%E5%85%B3%E9%94%AE%E7%82%B9&quot;&gt;具体实施关键点 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B7%E4%BD%93%E5%AE%9E%E6%96%BD%E5%85%B3%E9%94%AE%E7%82%B9&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;针对需求，进一步考虑实现过程中可能会遇到的问题，有时候未必考虑的清楚，可能需要在实施的时候才能够发现，但是这一步提前考虑是需要做的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用什么作为缓存的key?&lt;br&gt;
本服务的 api请求  是json格式的POST， 我们需要用请求的字段作为key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存过期时间？&lt;br&gt;
缓存可以设置自动失效时间，因为 ETL 一般重刷任务间隔时间是比较短的，通过配置参数 CACHE_DEFAULT_TIMEOUT 在cache初始化的时候传入即可，cache在到期之后会自动删除掉，这样不需要为每个函数单独指定失效时间&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Flask&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; flask_caching &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Cache&lt;br&gt;    config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;token comment&quot;&gt;# some Flask specific configs&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;CACHE_TYPE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SimpleCache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# Flask-Caching related configs&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;CACHE_DEFAULT_TIMEOUT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Flask&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;# tell Flask to use the above defined config&lt;/span&gt;&lt;br&gt;    app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;from_mapping&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Cache&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何实现当服务有正常结果的时候就缓存，没有正常结果的时候就不缓存&lt;br&gt;
通过查看 flask_caching的文档发现,  这个库是通过添加 caching.cached 装饰器来实现缓存的&lt;br&gt;
@app.route(&amp;quot;/&amp;quot;)&lt;br&gt;
@cache.cached(timeout=50)&lt;br&gt;
def index():&lt;br&gt;
return render_template(&#39;index.html&#39;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进一步去看 cache.cached 本身的代码(省略无关的代码)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数本身返回的是一个装饰器&lt;/li&gt;
&lt;li&gt;有下面的字段是和要不要设置缓存相关的
&lt;ul&gt;
&lt;li&gt;response_filter:   发生在主逻辑计算之后，对结果进行过滤，比如我们可以设置如果结果是500错误就不缓存了&lt;/li&gt;
&lt;li&gt;unless: 发生在主逻辑计算之前,  可以设置一个特殊条件，如果满足，那么不走缓存（也不会保存缓存了）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们希望发生 500错误不需要缓存，那么response_filter这个参数比较符合要求，此外还有一个比较隐蔽的做法，就是如果路由函数执行的死后抛出了异常，这个时候异常交给单独的error handler 处理，其实也是不会保存缓存的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternately, looking at the code for Flask-Cache it appears it&lt;br&gt;
does not handle errors thrown by the view&lt;br&gt;
. So you could   simply raise the error yourself and handle the exception with a separate handler:&lt;br&gt;
摘自 stack overflow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于开发时候没有仔细看文档😢，具体实现采用的是“比较隐蔽的做法”， response_filter 应该更加直观。&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cached&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    timeout&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    key_prefix&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;view/%s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    unless&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Callable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    forced_update&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Callable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    response_filter&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Callable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    query_string&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    hash_method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Callable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hashlib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md5&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    cache_none&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    make_cache_key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Callable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    source_check&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Callable&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;Decorator. Use this to cache a function. By default the cache key&lt;br&gt;    is `view/request.path`. You are able to use this decorator with any&lt;br&gt;    function by changing the `key_prefix`. If the token `%s` is located&lt;br&gt;    within the `key_prefix` then it will replace that with `request.path`&lt;br&gt;    &lt;br&gt;    Example::&lt;br&gt;    &lt;br&gt;        # An example view function&lt;br&gt;        @cache.cached(timeout=50)&lt;br&gt;        def big_foo():&lt;br&gt;            return big_bar_calc()&lt;br&gt;    &lt;br&gt;        # An example misc function to cache.&lt;br&gt;        @cache.cached(key_prefix=&#39;MyCachedList&#39;)&lt;br&gt;        def get_list():&lt;br&gt;            return [random.randrange(0, 1) for i in range(50000)]&lt;br&gt;    &lt;br&gt;        my_list = get_list()&lt;br&gt;    &lt;br&gt;    .. note::&lt;br&gt;    &lt;br&gt;        You MUST have a request context to actually called any functions&lt;br&gt;        that are cached.&lt;br&gt;    &lt;br&gt;    .. versionadded:: 0.4&lt;br&gt;        The returned decorated function now has three function attributes&lt;br&gt;        assigned to it. These attributes are readable/writable.&lt;br&gt;    &lt;br&gt;            **uncached**&lt;br&gt;                The original undecorated function&lt;br&gt;    &lt;br&gt;            **cache_timeout**&lt;br&gt;                The cache timeout value for this function. For a&lt;br&gt;                custom value to take affect, this must be set before the&lt;br&gt;                function is called.&lt;br&gt;    &lt;br&gt;            **make_cache_key**&lt;br&gt;                A function used in generating the cache_key used.&lt;br&gt;    &lt;br&gt;                readable and writable&lt;br&gt;    &lt;br&gt;    :param timeout: Default None. If set to an integer, will cache for that&lt;br&gt;                    amount of time. Unit of time is in seconds.&lt;br&gt;    &lt;br&gt;    :param key_prefix: Default &#39;view/%(request.path)s&#39;. Beginning key to .&lt;br&gt;                    use for the cache key. `request.path` will be the&lt;br&gt;                    actual request path, or in cases where the&lt;br&gt;                    `make_cache_key`-function is called from other&lt;br&gt;                    views it will be the expected URL for the view&lt;br&gt;                    as generated by Flask&#39;s `url_for()`.&lt;br&gt;    &lt;br&gt;                    .. versionadded:: 0.3.4&lt;br&gt;                        Can optionally be a callable which takes&lt;br&gt;                        no arguments but returns a string that will&lt;br&gt;                        be used as the cache_key.&lt;br&gt;    &lt;br&gt;    :param unless: Default None. Cache will *always* execute the caching&lt;br&gt;                facilities unless this callable is true.&lt;br&gt;                This will bypass the caching entirely.&lt;br&gt;    &lt;br&gt;    :param forced_update: Default None. If this callable is true,&lt;br&gt;                        cache value will be updated regardless cache&lt;br&gt;                        is expired or not. Useful for background&lt;br&gt;                        renewal of cached functions.&lt;br&gt;    &lt;br&gt;    :param response_filter: Default None. If not None, the callable is&lt;br&gt;                            invoked after the cached funtion evaluation,&lt;br&gt;                            and is given one arguement, the response&lt;br&gt;                            content. If the callable returns False, the&lt;br&gt;                            content will not be cached. Useful to prevent&lt;br&gt;                            caching of code 500 responses.&lt;br&gt;    &lt;br&gt;    :param query_string: Default False. When True, the cache key&lt;br&gt;                        used will be the result of hashing the&lt;br&gt;                        ordered query string parameters. This&lt;br&gt;                        avoids creating different caches for&lt;br&gt;                        the same query just because the parameters&lt;br&gt;                        were passed in a different order. See&lt;br&gt;                        _make_cache_key_query_string() for more&lt;br&gt;                        details.&lt;br&gt;    &lt;br&gt;    :param hash_method: Default hashlib.md5. The hash method used to&lt;br&gt;                        generate the keys for cached results.&lt;br&gt;    :param cache_none: Default False. If set to True, add a key exists&lt;br&gt;                    check when cache.get returns None. This will likely&lt;br&gt;                    lead to wrongly returned None values in concurrent&lt;br&gt;                    situations and is not recommended to use.&lt;br&gt;    :param make_cache_key: Default None. If set to a callable object,&lt;br&gt;                    it will be called to generate the cache key&lt;br&gt;    &lt;br&gt;    :param source_check: Default None. If None will use the value set by&lt;br&gt;                        CACHE_SOURCE_CHECK.&lt;br&gt;                        If True, include the function&#39;s source code in the&lt;br&gt;                        hash to avoid using cached values when the source&lt;br&gt;                        code has changed and the input values remain the&lt;br&gt;                        same. This ensures that the cache_key will be&lt;br&gt;                        formed with the function&#39;s source code hash in&lt;br&gt;                        addition to other parameters that may be included&lt;br&gt;                        in the formation of the key.&lt;br&gt;    &lt;br&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@functools&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wraps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorated_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;#: Bypass the cache entirely.&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_bypass_cache&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unless&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;nonlocal&lt;/span&gt; source_check&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; source_check &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                source_check &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source_check&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;# 首先计算 cached_key &lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; make_cache_key &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;make_cache_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                    cache_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; make_cache_key&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                    cache_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _make_cache_key&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;                        args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; kwargs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; use_request&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;# 查询缓存&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token builtin&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;forced_update&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;                        forced_update&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; wants_args&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;forced_update&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; forced_update&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                    rv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;br&gt;                    found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                    rv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cache_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;br&gt;&lt;br&gt;                    &lt;span class=&quot;token comment&quot;&gt;# If the value returned by cache.get() is None, it&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token comment&quot;&gt;# might be because the key is not found in the cache&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token comment&quot;&gt;# or because the cached value is actually None&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; rv &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token comment&quot;&gt;# If we&#39;re sure we don&#39;t need to cache None values&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token comment&quot;&gt;# (cache_none=False), don&#39;t bother checking for&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token comment&quot;&gt;# key existence, as it can lead to false positives&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token comment&quot;&gt;# if a concurrent call already cached the&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token comment&quot;&gt;# key between steps. This would cause us to&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token comment&quot;&gt;# return None when we shouldn&#39;t&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; cache_none&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                            found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                            found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;has&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cache_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;debug&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt;&lt;br&gt;                logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exception&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Exception possibly due to cache backend.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;# 如果在查询缓存的时候遇到了错误，就会进入本身的函数计算&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;# 如果没有缓存，执行本身函数&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; found&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token comment&quot;&gt;# 注意这一行, 如果在执行 f(*args, **kwargs)的时候报错，也不会再执行下面的环节了&lt;/span&gt;&lt;br&gt;                rv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; response_filter &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; response_filter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;                            cache_key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                            rv&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                            timeout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;decorated_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache_timeout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; Exception&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;debug&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt;&lt;br&gt;                        logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exception&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token string&quot;&gt;&quot;Exception possibly due to cache backend.&quot;&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rv&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;default_make_cache_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;# Convert non-keyword arguments (which is the way&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;# `make_cache_key` expects them) to keyword arguments&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;# (the way `url_for` expects them)&lt;/span&gt;&lt;br&gt;            argspec_args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; inspect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getfullargspec&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;args&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; arg_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argspec_args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;                kwargs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arg_name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arg&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; _make_cache_key&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; kwargs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; use_request&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_make_cache_key_query_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_make_cache_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; kwargs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; use_request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; decorator&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;如果在请求中显式的声明了不使用缓存，如何跳过缓存?&lt;br&gt;
根据上面的分析，unless 参数其实是可以完美适用的，我们为请求添加一个 bypass 参数，默认是false， 表示优先使用缓存， 如果传入 true, 就跳过缓存 ，然后给 cache.cached 传入 unless 参数为当前请求的bypass参数就好了&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;is_bypass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    payload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bypass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/analysis&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; methods&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cached&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key_prefix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cache_key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unless&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;is_bypass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;analysis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;# 主路由函数负责处理 api 调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;如何限制缓存的占用空间大小？&lt;br&gt;
flask_caching 支持多种缓存的后端，可以是可flask 程序同一个进程里面的cache，可以是单独存在文件系统中，可以是redis, memcached 数据库作为缓存后端，甚至可以单独定义一个你自己的缓存后端，只要符合flask_caching所要求的的api接口就可以。&lt;br&gt;
简单起见，我们用了 redis作为缓存后端，利用 k8s 启动redis container的时候限制一下 redis 占用的最大内存就好了，没有用什么缓存淘汰算法 (比如 LRU )&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;# ....以上省略....&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; social&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;nlp&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;redis&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; redis&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;4.0.14&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6379&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 256Mi&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1Gi&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;%E6%B5%8B%E8%AF%95&quot;&gt;测试 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%B5%8B%E8%AF%95&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;对下面的关键点进行测试，保证改动是可以满足需求的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试 unless 参数是够生效 (手动修改传入的参数 bypass 为 true，查看是否有执行到路由函数内部)&lt;/li&gt;
&lt;li&gt;测试 500 错误是不是缓存了（把model svc地址填错构造一个错误）&lt;/li&gt;
&lt;li&gt;测试缓存失效的时候能够正常使用 （关掉redis 服务）&lt;/li&gt;
&lt;li&gt;测试开关缓存时wrk性能区别（&amp;lt;200    =&amp;gt;    1000+）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E9%99%84%E5%BD%95&quot;&gt;附录 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%99%84%E5%BD%95&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;缓存的简单介绍  &lt;a href=&quot;https://www.youtube.com/watch?v=U3RkDLtS7uY&quot;&gt;https://www.youtube.com/watch?v=U3RkDLtS7uY&lt;/a&gt; (印度小哥飚英语)&lt;/li&gt;
&lt;/ul&gt;

			
		</content>
	</entry>
	
	<entry>
		<title>Triplet Loss and Online Triplet Mining (翻译)</title>
		<link href="https://skadai.github.io/posts/triplet_loss/"/>
		<updated>2021-08-17T00:00:00-00:00</updated>
		<id>https://skadai.github.io/posts/triplet_loss/</id>
		<content type="html">
		  &lt;blockquote&gt;
&lt;p&gt;工作中碰到一个棘手的问题: 如何从海量商品中找到标准库中的那一个？&lt;br&gt;
自己尝试过通过纯文本信息（标题, 商品简介, 图片ocr识别出文字）效果不佳, 决定换一个思路看看图像检索能不能提供一些有价值的信息。&lt;/p&gt;
&lt;p&gt;本系列打算结合这个具体的问题, 系统总结下图像检索领域的基本概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;看到了 omoindrot的 &lt;a href=&quot;https://omoindrot.github.io/triplet-loss&quot;&gt;博客文章&lt;/a&gt;对理解 triplet loss 的原理和实现都非常有帮助, 特此翻译&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;triplet-loss-and-triplet-mining&quot;&gt;Triplet loss and triplet mining &lt;a class=&quot;direct-link&quot; href=&quot;#triplet-loss-and-triplet-mining&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8-softmax&quot;&gt;为什么不用 softmax &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8-softmax&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Triplet loss (三元组损失) 是谷歌在经典论文 &lt;a href=&quot;https://arxiv.org/abs/1503.03832&quot;&gt;FaceNet: A Unified Embedding for Face Recognition and Clustering&lt;/a&gt; 中提出的一种用来训练人脸 embedding 表征的损失函数。&lt;/p&gt;
&lt;p&gt;和传统的分类问题(固定类别数目, 使用交叉熵损失函数)不同, 人脸识别, 商品检索往往是大量的不确定类别匹配问题, 这个时候更好的做法是判断两个item是不是属于同一个类别。&lt;/p&gt;
&lt;p&gt;三元组损失就是为了上面的应用场景而出现的, 训练目标是来自同一个类别的样本距离要比来自不同类别的样本距离要近, 同一个列表样本形成一个类簇, 不同的类簇之间最好距离足够大。&lt;/p&gt;
&lt;h3 id=&quot;%E6%8D%9F%E5%A4%B1%E5%AE%9A%E4%B9%89&quot;&gt;损失定义 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8D%9F%E5%A4%B1%E5%AE%9A%E4%B9%89&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://omoindrot.github.io/assets/triplet_loss/triplet_loss.png&quot; alt=&quot;奥巴马和马克龙损失&quot;&gt;&lt;/p&gt;
&lt;p&gt;三元组损失的目标是在特征空间中满足&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相同标签的样本距离比较近&lt;/li&gt;
&lt;li&gt;不同标签样本距离比较远&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然鹅, 我们不希望让每个标签的样本训练到特别小的空间内（这句话原文 &lt;code&gt;we don’t want to push the train embeddings of each label to collapse into very small clusters&lt;/code&gt; 没有太理解, 作者专门解释了附在下面）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I mentioned that I meant that if you want to do classification or any task based on the embeddings, you only need the intra-cluster distance to be smaller than the inter-cluster distance. If you have that, then two examples from the same class will always have their embeddings closer than two examples from different classes.&lt;br&gt;
Once this is done, you don&#39;t really need to push the clusters closer together. My intuition is that if you do so, it&#39;s a form of overfitting and you will lose in test accuracy.&lt;/p&gt;
&lt;p&gt;In SphereFace they do something similar to softmax. Softmax is also going to push the predictions as close to 0 or to 1 as possible, which is to me a form of overfitting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;啰嗦了半天, 损失具体是这样设计的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anchor: 锚点样本(query 样本)&lt;/li&gt;
&lt;li&gt;postive: 正样本(和锚点样本标签一样)&lt;/li&gt;
&lt;li&gt;negative: 负样本(和锚点样本标签不一样)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;loss = max(d(a, p) - d(a, n) + margin, 0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;损失是锚点和正样本的距离减去负样本距离加上margin, 稍微解释一下&lt;br&gt;
试想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果锚点和正样本距离很近, 和负样本距离很远, 也就是达到我们的理想embedding条件, 此时loss为0&lt;/li&gt;
&lt;li&gt;如果锚点和正样本距离比较近, 和负样本距离比较远, 但是也没远多少, 此时因为有margin的存在, 这种情况loss会是一个 0-margin的值&lt;/li&gt;
&lt;li&gt;锚点和正样本反而比较远, 和负样本比较近, 这个时候 loss 直接大于margin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面三种情况分别对应模型区分的简单(easy negative), 中等(semi-hard negative), 困难的(hard negative)情况, 因此loss是一个比一个大的, 下面的图比较生动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://omoindrot.github.io/assets/triplet_loss/triplets.png&quot; alt=&quot;triplet illustration&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%89%E5%85%83%E7%BB%84%E7%AD%9B%E9%80%89(-triplet-mining)&quot;&gt;三元组筛选( triplet mining) &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%89%E5%85%83%E7%BB%84%E7%AD%9B%E9%80%89(-triplet-mining)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面关于三元组损失的定义有了, 只是从原理上大体实现了训练目标, 那么具体实现上选择那些样本作为三元组做法是很多的, 三元组的筛选主要分为 offline and online 两类&lt;/p&gt;
&lt;h4 id=&quot;offline-mining-(%E4%B8%8D%E5%A5%BD%E7%94%A8)&quot;&gt;offline mining (不好用) &lt;a class=&quot;direct-link&quot; href=&quot;#offline-mining-(%E4%B8%8D%E5%A5%BD%E7%94%A8)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;训练每个epoch之前, 把训练集全部embedding算出来, 找到 semi-hard 和 hard 进行训练, 计算量比较大&lt;/p&gt;
&lt;h4 id=&quot;online-mining-(%E5%A5%BD%E7%94%A8)&quot;&gt;online mining (好用) &lt;a class=&quot;direct-link&quot; href=&quot;#online-mining-(%E5%A5%BD%E7%94%A8)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在epoch每个batch训练的时候, 直接来, 不需要遍历全部的训练集, 就在一个小范围上面计算embedding并找到符合要求的&lt;/p&gt;
&lt;h3 id=&quot;%E5%9C%A8%E7%BA%BF%E7%AD%9B%E9%80%89%E7%AD%96%E7%95%A5&quot;&gt;在线筛选策略 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%9C%A8%E7%BA%BF%E7%AD%9B%E9%80%89%E7%AD%96%E7%95%A5&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;简而言之就是什么样的三元组需要进行训练, 在论文 &lt;a href=&quot;https://arxiv.org/abs/1703.07737&quot;&gt; In Defense of the Triplet Loss for Person Re-Identification.&lt;/a&gt; 有详述&lt;/p&gt;
&lt;p&gt;假设每个batch size 为 B = PK ,  其中 P表示不同的标签, K表示每个标签挑选的样本数目, 我们只需要在这个小范围内进行挑选合适的三元组&lt;/p&gt;
&lt;h4 id=&quot;batch-all&quot;&gt;batch all &lt;a class=&quot;direct-link&quot; href=&quot;#batch-all&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;选择所有合法的三元组(正样本和anchor同标签, 负样本和anchor标签不同), 刨除掉easy negative之后取平均loss&lt;/li&gt;
&lt;li&gt;总共可能的三元组数目 PK(K-1)(PK-K), 依次表示, anchor可能数目, postive 可能数目, negative 可能数目&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;batch-hard&quot;&gt;batch hard &lt;a class=&quot;direct-link&quot; href=&quot;#batch-hard&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;每一个anchor, 在当前 batch中 选择最困难的正样本(d(a,p) 最大) 和最困难的负样本( d(a, n)最小)形成三元组进行训练&lt;/li&gt;
&lt;li&gt;总共可能的三元组就是 PK, 每个batch就只选择最困难的训练样本进行训练（论文声称这样比 batch all表现好, 好不好不知道, 但是训练时间短是真的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E5%90%8E%E7%BB%AD%E7%AB%A0%E8%8A%82(%E7%95%A5)&quot;&gt;后续章节(略) &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%90%8E%E7%BB%AD%E7%AB%A0%E8%8A%82(%E7%95%A5)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;下面是代码实现和示例项目, 直接看原博就好了。 尤其是作者关于 batch hard strategy 的实现, 可谓是赏心悦目, 值得好好学习&lt;/p&gt;
&lt;h4 id=&quot;%E6%84%9F%E6%83%B3&quot;&gt;感想 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%84%9F%E6%83%B3&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;triplet loss 的思想和之前看过的一个&lt;a href=&quot;https://github.com/wvangansbeke/Unsupervised-Classification&quot;&gt;文章&lt;/a&gt;有一些相似, 都是关注样本内部相同标签和不同标签的差异性, 后者解决的是固定标签数目的无监督分类问题, 直接用图片的变化认为是一个正样本来做, anchor和正样本的距离尽可能小, 配合 self-labelling (把置信度高的直接当成标注数据) 让无监督分类的准确率直接达到了 85% 以上&lt;/p&gt;
&lt;p&gt;对于商品匹配问题, 从类间差异和类内共性出发, 有没有可能挖掘一些弱监督的训练手段呢 ?&lt;/p&gt;

			
		</content>
	</entry>
</feed>
