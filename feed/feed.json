{
  "version": "https://jsonfeed.org/version/1",
  "title": "长安路",
  "home_page_url": "https://skadai.github.io",
  "feed_url": "https://skadai.github.io/feed/feed.json",
  "description": "sk blog",
  "author": {
    "name": "sk",
    "url": ""
  },
  "items": [{
      "id": "https://skadai.github.io/posts/rsshub/",
      "url": "https://skadai.github.io/posts/rsshub/",
      "title": "试用 RSSHub",
      "content_html": "<h4 id=\"rss-%E6%98%AF%E4%BB%80%E4%B9%88\">RSS 是什么 <a class=\"direct-link\" href=\"#rss-%E6%98%AF%E4%BB%80%E4%B9%88\">#</a></h4>\n<p><a href=\"https://en.wikipedia.org/wiki/RSS\">RSS</a> 的全称是 RDF Site Summary 或者 Really Simple Syndication, <s>别问我英文啥意思我不认识</s><br>\n就是让不同的网站的数据都可以用统一的格式进行定义和传输，这样我们可挑选自己感兴趣的网站进行订阅，获取到新的文章集中阅读了，这可以让我们集中阅读感兴趣的文章乃至观看视频，不用在网站上面晃来晃去浪费时间啦</p>\n<h4 id=\"rss-%E9%98%85%E8%AF%BB%E5%99%A8\">RSS 阅读器 <a class=\"direct-link\" href=\"#rss-%E9%98%85%E8%AF%BB%E5%99%A8\">#</a></h4>\n<p>不少网站都提供了下面这个按钮，其实代表的就是rss的意思，点击按钮可以得到一个url，这个url提供的就是和正式网站一直但是样式有别的订阅内容了，通常会是xml格式的文本，所以是没办法方便直接看的。<br>\n<img src=\"http://cdn.glofission.xyz/img/1b1fe7c45939aff7450787a980c29691-20210807171958-32a5c6.png\" alt=\"rss icon\"></p>\n<p>此时呢，我们需要有一个阅读器可以解析这么内容并渲染成良好的格式，比如 mac 用户可以选择 <a href=\"https://reederapp.com/\">reeder</a>。<br>\n使用的方式也是很简单的，直接在reeder中创建一个本地rss账户, 然后添加订阅源</p>\n<p><img src=\"http://cdn.glofission.xyz/img/5587b52eff73570439b162d574847050-20210807173555-f52921.png\" alt=\"reeder操作\"></p>\n<p>然后就可以看到，添加源的文章已经一个个排好等待阅读了，reeder 阅读器已经帮忙渲染好了，可以看到排版还是不错的</p>\n<p><img src=\"http://cdn.glofission.xyz/img/5f62ce7eb780ed571010188fe8765b2d-20210807173835-088b0a.png\" alt=\"reeder article\"></p>\n<h4 id=\"rsshub\">RSSHub <a class=\"direct-link\" href=\"#rsshub\">#</a></h4>\n<p>实际上，很多网站是没有上面那个魔法图标的，比如b站，我们每次就只能进入网站，点击关注的up动态，看有没有投稿，然后再点进去观看了么？</p>\n<p>当然是有更好的办法的，<a href=\"https://github.com/DIYgod/RSSHub\">RSSHub</a> 就是来干这个的</p>\n<blockquote>\n<p>RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容</p>\n</blockquote>\n<p>翻译一下，就是会写代码的人已经帮把一些常用的网站做好了提取rss的方法，只需要有个机器能根据这些方法把网站数据整成标准 RSS 的格式并提供 url 链接，然后我们就像上面那样用就好了。下面的图片展示了 RSSHub 支持了哪些网站，还是相当丰富的</p>\n<p>RSSHub 自己是提供了试用 <a href=\"https://rsshub.app\">demo</a> 的，只需要简单的按照不同网站指定的url格式自己拼接，然后直接粘贴到阅读器里面就完事了！</p>\n<div style=\"display:flex;justify-content:space-between\">\n<img src=\"http://cdn.glofission.xyz/img/9d3beee4c6f6ef1f1228b0b706e80863-20210807175616-dc81cd.png\">\n<img src=\"http://cdn.glofission.xyz/img/179e3b153d7d76dc0497e6f7d4944a2a-20210807175551-b96172.png\">\n</div>\n<h4 id=\"rsshub-%E9%83%A8%E7%BD%B2\">RSSHub 部署 <a class=\"direct-link\" href=\"#rsshub-%E9%83%A8%E7%BD%B2\">#</a></h4>\n<p>官方试用的demo毕竟太多人用，很容易遭到网站的反爬限制，这个时候你可以选择自己部署一个 RSSHub 的服务, RSSHub 的官方文档里面也有 <a href=\"https://docs.rsshub.app/install/\">操作说明</a>, 亲测可用</p>\n<p>下面简单描述下流程，首先得有一个自己的服务器，我用的是 aliyun ECS(单核 内存2GiB, 硬盘40GB)</p>\n<ol>\n<li>\n<p>ssh 登录到服务器</p>\n</li>\n<li>\n<p>拉取 RSSHub 的 Docker 镜像, 不加 tag 的话会直接下载最新的</p>\n</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell\">docker pull diygod/rsshub</code></pre>\n<blockquote>\n<p>如果没有用过 docker 的话需要自己先安装一下， 可以参考 <a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\">Ubuntu Docker安装</a></p>\n</blockquote>\n<ol start=\"3\">\n<li>启动镜像</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell\">docker run -d --name rsshub -p <span class=\"token number\">1200</span>:1200 diygod/rsshub</code></pre>\n<p>稍微解释一下上面这个命令</p>\n<ul>\n<li><code>docker run</code> 就是把镜像启动一个容器跑起来，<code>--name</code> 给容器命名， <code>-d</code> 指定后台运行</li>\n<li><code>-p 1200:1200</code> 并让服务器上面的1200端口和容器内部的1200建立映射，这样在服务器上面访问 localhost:1200 就可以访问到容器里面的服务了，容器内部的端口1200是写死的，但是服务器上面的端口是可以修改的，比如改成8000（如果没有冲突的话）</li>\n</ul>\n<ol start=\"4\">\n<li>服务器安全组加上1200端口, 操作如下</li>\n</ol>\n<p>好吧，其实上面 RSSHub 文档里面都有....</p>\n<p><img src=\"http://cdn.glofission.xyz/img/a070687ca2ed0a117eac459bd2edfbfc-20210807181508-b0ee44.png\" alt=\"add rule\"></p>\n<p><img src=\"https://gitee.com/skadai/bluebird/raw/master/5a4ca0d6c33d77ffef06e1cbe305daef-20210808092442-13a705.png\" alt=\"add rule2\"></p>\n<ol start=\"5\">\n<li>把安全组应用到ECS上面</li>\n</ol>\n<p><img src=\"http://cdn.glofission.xyz/img/c7c495b56bb08bcbbe1b7bc593012e6e-20210807182042-0a7e9a.png\" alt=\"apply rule\"></p>\n<p>上面图片打码的就是服务器的公网 IP了，经过上面一通操作我们在浏览器输入 http://&lt;公网IP&gt;:1200, 看到和上面 RSSHub demo 一样的页面就算部署成功了，之后我们就可以用专属的RSS 提取服务来生成订阅源了🙂</p>\n<p><img src=\"http://cdn.glofission.xyz/img/20dd670b20cc76c57676829ac7ba0657-20210807182335-38e268.png\" alt=\"final page\"></p>\n<hr>\n<p>有个 RSSHub + Reeder 这个组合，就可以很方便添加自己感兴趣的内容了，不用在漫无目的的看了，大大的节省时间（<s>maybe是看了更多有的没的</s>）</p>\n",
      "date_published": "2021-08-07T00:00:00-00:00"
    },{
      "id": "https://skadai.github.io/posts/deploy_11ty_in_github-page/",
      "url": "https://skadai.github.io/posts/deploy_11ty_in_github-page/",
      "title": "如何部署11ty到github page",
      "content_html": "<h4 id=\"%E6%B5%81%E7%A8%8B\">流程 <a class=\"direct-link\" href=\"#%E6%B5%81%E7%A8%8B\">#</a></h4>\n<ol>\n<li>\n<p>下载11ty 模板 <a href=\"https://github.com/google/eleventy-high-performance-blog\">https://github.com/google/eleventy-high-performance-blog</a>, 按照提示构建自己的本地博客</p>\n</li>\n<li>\n<p>新增 .nojekyll 文件, 此文件用来告知 github-page 不使用 jekyll 以免产生冲突</p>\n</li>\n<li>\n<p>新增你自己的git仓库, 命名为 &lt;username&gt;.github.io</p>\n</li>\n<li>\n<p>利用下面的命令生成一对秘钥</p>\n</li>\n</ol>\n<pre class=\"language-shell\"><code class=\"language-shell\">    ssh-keygen -t rsa -b <span class=\"token number\">4096</span> -C <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> config user.email<span class=\"token variable\">)</span></span>\"</span> -f gh-pages -N <span class=\"token string\">\"\"</span></code></pre>\n<ul>\n<li>\n<p>公钥添加到刚刚的仓库 deploy key</p>\n<p><img src=\"http://cdn.glofission.xyz/img/58b01ba0e0ca16a8610e92c1d0d2b661-20210730142442-19f6c1.png\" alt=\"添加公钥\"></p>\n</li>\n<li>\n<p>私钥添加到刚刚的仓库 secret</p>\n<p><img src=\"http://cdn.glofission.xyz/img/a99999f7a1731866c320691fcb87e148-20210730142605-2772eb.png\" alt=\"添加私钥\"></p>\n</li>\n</ul>\n<ol start=\"5\">\n<li>在本地项目新增 .github/workflow/build.yml 文件, 添加下面的内容, 主要逻辑是打包静态文件, 并调用预定义的github action 把<br>\n编译好的文件提交到git仓库</li>\n</ol>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Eleventy Build<br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> master<br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest<br>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2<br><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node<br>          <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1<br>          <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>            <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'14.x'</span><br><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm ci<br><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build<br><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>          <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3<br>          <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>            <span class=\"token key atrule\">deploy_key</span><span class=\"token punctuation\">:</span> $<br>            <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site<br></code></pre>\n<blockquote>\n<p>上面文件中 secrets.ACTIONS_DEPLOY_KEY 正好对应了步骤4中配置好的私钥, 这样action中可以向仓库gh-page分支提交编译好的文件</p>\n</blockquote>\n<ol start=\"6\">\n<li>最后一步, 把github-page的source 设置为gh-page, 这样每次往master分支提交内容之后, 就可以触发 action 自动编译文件push到gh-page分支, 你可以在自己的 &lt;username&gt;.github.io 看到最新的博客了</li>\n</ol>\n<h4 id=\"%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\">参考资料 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\">#</a></h4>\n<ul>\n<li><a href=\"https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/\">https://www.rockyourcode.com/how-to-deploy-eleventy-to-github-pages-with-github-actions/</a></li>\n<li><a href=\"https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/\">https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/</a></li>\n<li>11ty基本用法\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1zw41197NL?from=search&amp;seid=4624100872590089830\">https://www.bilibili.com/video/BV1zw41197NL?from=search&amp;seid=4624100872590089830</a></li>\n<li><a href=\"https://www.11ty.dev/\">https://www.11ty.dev/</a></li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-07-31T00:00:00-00:00"
    },{
      "id": "https://skadai.github.io/posts/Starter/",
      "url": "https://skadai.github.io/posts/Starter/",
      "title": "starter",
      "content_html": "<p>定风波</p>\n<p>苏轼</p>\n<blockquote>\n<p>三月七日，沙湖道中遇雨。雨具先去，同行皆狼狈，余独不觉，已而遂晴，故作此词。</p>\n</blockquote>\n<p>莫听穿林打叶声，何妨吟啸且徐行。</p>\n<p>竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。</p>\n<p>料峭春风吹酒醒，微冷，山头斜照却相迎。</p>\n<p>回首向来萧瑟处，归去，也无风雨也无晴</p>\n",
      "date_published": "2021-07-30T00:00:00-00:00"
    }
  ]
}
